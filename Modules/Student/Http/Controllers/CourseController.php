<?php

namespace Modules\Student\Http\Controllers;

use App\Models\Course;
use App\Models\EnrollCourseRequest;
use App\Models\StudentCourse;
use App\Models\StudyPlan;
use Illuminate\Contracts\Support\Renderable;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Modules\Base\Http\Controllers\BaseController;

class CourseController extends BaseController
{


    protected $config = array(
        'addBtn' => false,
        'editBtn' => false,
        'deleteBtn' => false,
        'deleteGroupAction' => false,
        'deleteAction' => false,
        'importBtn' => false,
        'trash' => false,
        'showAction' => false,
        'status_btn' => true,
        'slot' => 'dash.list.components.student_course'
    );


    protected $appended_actions = array(
        'enroll'
    );

//    public function __construct()
//    {
//        parent::__construct();
//        (new Course())->setColumns(array(
//            'id', 'course_ident', 'name', 'hour_number', 'semester_name','teachers'
//        ));
//    }
    public function index()
    {
        if (request()->ajax()) {
            $explode = explode(',', get(request()->get('search'), 'value'));
            $requestValue = get($explode, 1, null);

            $query = $this->getQuery()->whereHas('specializations',function ($query){
                $query->where('id',get(auth()->user(),'specialization_id'));
            })->where('semester_id',get(current_semester(),'ordered'));
            if (!empty($requestValue)){
                $query->whereHas('studentRequest',function ($query) use($requestValue){
                    $query->where('status',$requestValue);
                });
            }

            return response()->json(['data' => $this->resource::Collection($query->ordered()->get())->toArray(request()),
                'recordsFiltered' => $query->paginate()->total(), 'recordsTotal' => $query->paginate(self::PAGINATE_PER_PAGE)->total() ?? 0], 200,);
        }
        $compact = get_data_table_source(
            $this->model,
            array('id', 'course_ident', 'name', 'hour_number', 'semester_name', 'editable-select' => 'teachers'),
            array('config' => $this->config, 'editable_input' => array(),
                'appended_actions' => array('enroll'))
        );
        return view($this->viewIndex, $compact);
    }


//    public function getQuery()
//    {
//        $q = parent::getQuery(); // TODO: Change the autogenerated stub
//        $requestValue = get(explode(',', get(request()->get('search'), 'value')), 1, null);
//        $q->whereHas('specializations',function ($query){
//            $query->where('id',get(auth()->user(),'specialization_id'));
//        });
////        $q->where(function ($inner) use ($requestValue) {
////            if ($requestValue) {
////                $inner->whereHas('studentRequest', function ($q) use ($requestValue) {
////                    $q->where('status', $requestValue);
////                });
////            } else {
////                $inner->whereDoesntHave('semester.study_plan');
////            }
////
////        })->where('semester_id', get(current_semester(), 'id'));
//        return $q;
//    }

    public function enroll(Request $request)
    {
        $course = Course::find($request->get('id'));
        if (!$request->get('selected_teacher'))
            return response()->json(array('status' => false, 'message' => 'الرجاء اختيار المدرس'));

        $user = auth()->user();
        $hours_count = current_semester_hours_count($user);
        if (!current_semester())
            return response()->json(array('status' => false, 'message' => 'الفصل الحالي لم يبدأ بعد'));

        if (($hours_count + $course->hour_number) > current_semester()->number_of_hour)
            return response()->json(array('status' => false, 'message' => 'لقد تجاوزت عدد الساعات المسموح بها للفصل الحالي'));

        if ($user->balance < ($course->hour_number * get($user, 'specialization.hour_price', 1)))
            return response()->json(array('status' => false, 'message' => 'عذرا .. قم بتسوية وضعك المالي'));


        $model = EnrollCourseRequest::create(array(
            'student_id' => auth()->id(),
            'course_id' => $request->get('id'),
            'teacher_id' => $request->get('selected_teacher'),
            'course_data' => Course::find($request->get('id')),
            'student_data' => auth()->user(),
            'status' => 'pending'
        ));
        return response()->json(array('status' => true, 'model' => $model));
    }
}
